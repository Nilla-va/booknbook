<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cjcs.bnb.dao.PurchaseDao">




<!--수희-->
    <select id="getPurchaseListByOId" parameterType="Integer" resultType="Map">
        <!-- Map객체에 넣을 때는 아래처럼 as "키이름" 지정해줘야 함 -->
        SELECT s_storename as "s_storename",
               b_title as "b_title",
               b_price as "b_price",
               p_amount as "p_amount",
               order_status_id as "order_status_id",
               order_status as "order_status",
               delivery_status_id as "delivery_status_id",
               delivery_status as "delivery_status",
               p_deliverydate as "p_deliverydate"
        FROM O, P, B, S, STATUS_O, STATUS_D
        WHERE o_id = p_o_id AND p_s_id = s_id AND
            p_s_id = b_s_id AND p_b_isbn = b_isbn AND
            p_order_status_id = order_status_id AND
            p_delivery_status_id = delivery_status_id AND
            o_id = #{o_id}
        ORDER BY s_storename DESC
    </select>

    <select id="getPurchaseListByCId" parameterType="String" resultType="Map">
        <!-- Map객체에 넣을 때는 아래처럼 as "키이름" 지정해줘야 함 -->
        SELECT p_id as "p_id",
               o_id as "o_id",
               o_date as "o_date",
               b_title as "b_title",
               p_amount as "p_amount",
               s_storename as "s_storename",
               re_sort as "re_sort",
               re_amount as "re_amount",
               re_process_status_id as "re_process_status_id",
               delivery_status as "delivery_status",
               p_delivery_status_id as "p_delivery_status_id"
        FROM (SELECT p_id, o_id, o_date, s_storename, b_title, p_amount, p_s_id, p_b_isbn, delivery_status, p_delivery_status_id
              FROM O, P, B, S, STATUS_D
              WHERE o_id = p_o_id AND p_s_id = s_id AND
                    p_s_id = b_s_id AND p_b_isbn = b_isbn AND
                    p_delivery_status_id = delivery_status_id AND
                    p_c_id = #{c_id})
              LEFT OUTER JOIN
              RE
              ON o_id = re_o_id AND p_s_id = re_s_id AND p_b_isbn = re_b_isbn
        ORDER BY o_date DESC, s_storename, b_title
    </select>

    <!-- 구매자별 조회기간 내의 구매항목-->
    <select id="getPurchaseListByDateRange" resultType="Map">
		SELECT * FROM
		<choose>
		    <when test="startDate != null and endDate != null">                
		    	(SELECT rownum rn, PL.*      
		    	 FROM (SELECT p_id as "p_id",
                              o_id as "o_id",
                              o_date as "o_date",
                              b_title as "b_title",
                              p_amount as "p_amount",
                              s_storename as "s_storename",
                              re_sort as "re_sort",
                              re_amount as "re_amount",
                              re_process_status_id as "re_process_status_id",
                              delivery_status as "delivery_status",
                              p_delivery_status_id as "p_delivery_status_id",
                              p_deliverydate as "p_deliverydate"
                       FROM (SELECT p_id, o_id, o_date, s_storename, b_title, p_amount, p_s_id, p_b_isbn, delivery_status, p_delivery_status_id, p_deliverydate
                             FROM O, P, B, S, STATUS_D
                             WHERE o_id = p_o_id AND p_s_id = s_id AND
                                   p_s_id = b_s_id AND p_b_isbn = b_isbn AND
                                   p_delivery_status_id = delivery_status_id AND
                                   p_c_id = #{c_id} AND o_date BETWEEN #{startDate} AND #{endDate}+1)
                             LEFT OUTER JOIN
                             RE
                             ON o_id = re_o_id AND p_s_id = re_s_id AND p_b_isbn = re_b_isbn
                       ORDER BY o_date DESC, s_storename, b_title) PL
		    	)
		    </when>
		    <otherwise>
		    	(SELECT rownum rn, PL.*
				 FROM (SELECT p_id as "p_id",
                              o_id as "o_id",
                              o_date as "o_date",
                              b_title as "b_title",
                              p_amount as "p_amount",
                              s_storename as "s_storename",
                              re_sort as "re_sort",
                              re_amount as "re_amount",
                              re_process_status_id as "re_process_status_id",
                              delivery_status as "delivery_status",
                              p_delivery_status_id as "p_delivery_status_id",
                              p_deliverydate as "p_deliverydate"
                       FROM (SELECT p_id, o_id, o_date, s_storename, b_title, p_amount, p_s_id, p_b_isbn, delivery_status, p_delivery_status_id, p_deliverydate
                             FROM O, P, B, S, STATUS_D
                             WHERE o_id = p_o_id AND p_s_id = s_id AND
                                   p_s_id = b_s_id AND p_b_isbn = b_isbn AND
                                   p_delivery_status_id = delivery_status_id AND
                                   p_c_id = #{c_id})
                             LEFT OUTER JOIN
                             RE
                             ON o_id = re_o_id AND p_s_id = re_s_id AND p_b_isbn = re_b_isbn
                       ORDER BY o_date DESC, s_storename, b_title) PL
				)
		    </otherwise>
		</choose>
		<![CDATA[
		WHERE rn>=#{pageNum}*#{listCnt}-9 and rn<=#{pageNum}*#{listCnt}
		]]>
    </select>

    <!-- 판매자페이지 판매내역관리용 -->
    <select id="getPurchaseListBySId" parameterType="String" resultType="PurchaseDto">
        SELECT o_id,
               item_id as p_id,
               o_date,
               o_delivery_sort,
               o_recip_addr,
               o_recip_name,
               REGEXP_REPLACE(o_recip_phone, '(.{3})(.+)(.{4})', '\1-\2-\3') o_recip_phone,
               o_c_id,
               s_storename,
               b_title,
               b_isbn as p_b_isbn,
               amount as p_amount,
               order_status_id as p_order_status_id,
               order_status,
               delivery_status_id as p_delivery_status_id,
               delivery_status,
               deliverydate as p_deliverydate
        FROM ORDER_LIST
        WHERE s_id = #{s_id} AND order_sort = '구매'
        ORDER BY o_id DESC, b_title
    </select>

    <select id="getPurchaseItemByPId" parameterType="Integer" resultType="Map">
        <!-- Map객체에 넣을 때는 아래처럼 as "키이름" 지정해줘야 함 -->
        SELECT p_id as "p_id",
               s_storename as "s_storename",
               b_title as "b_title",
               p_amount as "p_amount",
               re_amount as "re_amount"
        FROM (SELECT p_id, s_storename, b_title, p_amount, p_o_id, p_s_id, p_b_isbn
              FROM P, S, B
              WHERE p_s_id = s_id AND
                    p_s_id = b_s_id AND p_b_isbn = b_isbn AND
                    p_id = #{p_id})
              LEFT OUTER JOIN
              RE
              ON p_o_id = re_o_id AND p_s_id = re_s_id AND p_b_isbn = re_b_isbn
        ORDER BY p_id DESC
    </select>

    <select id="getLatest5PurchaseListByCId" parameterType="String" resultType="PurchaseDto">
        SELECT rownum, o_id, o_date, b_title, delivery_status
        FROM (SELECT * FROM order_list_p WHERE o_c_id = #{c_id} ORDER BY o_date DESC)
        <![CDATA[
        WHERE rownum<6
        ]]>
    </select>

    <!-- 구매자별 조회기간 내의 총 구매항목수 세기-->
    <select id="countPurchasesByDateRange" resultType="Integer">
        SELECT COUNT(*) FROM P, O
        WHERE p_c_id = #{c_id} AND p_o_id = o_id
        <if test="startDate != null and endDate != null">
		      AND o_date BETWEEN #{startDate} AND #{endDate}+1
		</if>
    </select>

    <select id="countAllPurchaseItems" resultType="Map">
        SELECT COUNT(*) as "num_of_purchases" FROM P
    </select>

    <insert id="addPurchaseList" parameterType="Map">
        INSERT INTO P(p_o_id, p_s_id, p_b_isbn, p_c_id, p_amount, p_order_status_id, p_ordercancel_rejection_reason, p_delivery_status_id, p_deliverydate, p_id)
        VALUES(#{o_id}, #{cart_s_id}, #{cart_b_isbn}, #{c_id}, #{cart_amount}, 1, NULL, 1, NULL, P_SEQ.NEXTVAL)
    </insert>

    <update id="cancelPurchaseByOId" parameterType="Integer">
        UPDATE P
        SET p_order_status_id = 2
        WHERE p_o_id = #{o_id}
    </update>

    <!-- 판매자페이지 주문취소관리용 -->
    <update id="updateOrderStatusByPId" parameterType="Map">
        UPDATE P
        SET p_order_status_id = #{status_id}
            <if test="reason != null">
                , p_ordercancel_rejection_reason = #{reason}
            </if>
        WHERE p_id = #{item_id}
    </update>

    <!-- 판매자페이지 판매내역관리용 -->
    <update id="updateDeliveryStatusByPId" parameterType="Map">
        UPDATE P
        SET p_delivery_status_id = #{status_id}
            <if test="status_id == 4 || status_id == 7">
                , p_deliverydate = SYSDATE
            </if>
        WHERE p_id = #{p_id}
    </update>

    <select id="getPurchaseInfoForRE" parameterType="Integer" resultType="RefExchDto">
        SELECT p_o_id as "re_o_id",
               p_c_id as "re_c_id",
               p_s_id as "re_s_id",
               p_b_isbn as "re_b_isbn"
        FROM P
        WHERE p_id = #{p_id}
    </select>

    <insert id="addRefExchList" parameterType="RefExchDto">
        INSERT INTO RE(re_id, re_o_id, re_c_id, re_s_id, re_b_isbn, re_sort, re_reason, re_amount, re_reqdate, re_process_status_id, re_rejection_reason)
        VALUES(RE_SEQ.NEXTVAL, #{re_o_id}, #{re_c_id}, #{re_s_id}, #{re_b_isbn}, #{re_sort}, #{re_reason}, #{re_amount}, DEFAULT, 1, NULL)
    </insert>

    <select id="getRefExchListByCId" parameterType="String" resultType="RefExchDto">
        SELECT RE.*, s_storename, b_title, b_price, process_status
        FROM RE, S, B, STATUS_RE
        WHERE re_s_id = s_id AND
              re_s_id = b_s_id AND re_b_isbn = b_isbn AND
              re_process_status_id = process_status_id AND
              re_c_id = #{c_id}
        ORDER BY re_reqdate DESC
    </select>

    <!-- 구매자별 조회기간 내의 교환반품항목-->
    <select id="getRefExchListByDateRange" resultType="RefExchDto">
		SELECT * FROM
		<choose>
		    <when test="startDate != null and endDate != null">                
		    	(SELECT rownum rn, REL.*      
		    	 FROM (SELECT RE.*, s_storename, b_title, b_price, process_status
                       FROM RE, S, B, STATUS_RE
                       WHERE re_s_id = s_id AND
                             re_s_id = b_s_id AND re_b_isbn = b_isbn AND
                             re_process_status_id = process_status_id AND
                             re_c_id = #{c_id} AND re_reqdate BETWEEN #{startDate} AND #{endDate}+1
                       ORDER BY re_reqdate DESC) REL
		    	)
		    </when>
		    <otherwise>
		    	(SELECT rownum rn, REL.*
				 FROM (SELECT RE.*, s_storename, b_title, b_price, process_status
                       FROM RE, S, B, STATUS_RE
                       WHERE re_s_id = s_id AND
                             re_s_id = b_s_id AND re_b_isbn = b_isbn AND
                             re_process_status_id = process_status_id AND
                             re_c_id = #{c_id}
                       ORDER BY re_reqdate DESC) REL
				)
		    </otherwise>
		</choose>
		<![CDATA[
		WHERE rn>=#{pageNum}*#{listCnt}-9 and rn<=#{pageNum}*#{listCnt}
		]]>
    </select>

    <select id="getCurrentRefExchListByCId" parameterType="String" resultType="RefExchDto">
        SELECT rownum, re_sort, re_reqdate, b_title, s_storename, process_status
        FROM (SELECT re_sort, re_reqdate, b_title, s_storename, process_status
              FROM RE, S, B, STATUS_RE, O
              WHERE re_s_id = s_id AND re_s_id = b_s_id AND re_b_isbn = b_isbn AND
                    re_process_status_id = process_status_id AND
                    <![CDATA[
                    re_process_status_id<3 AND
                    ]]>
                    o_id = re_o_id AND o_c_id = #{c_id}
              ORDER BY re_id DESC)
        <![CDATA[
        WHERE rownum<4
        ]]>
    </select>

    <!-- 구매자별 조회기간 내의 총 교환반품신청건수 세기-->
    <select id="countRefExchsByDateRange" resultType="Integer">
        SELECT COUNT(*) FROM RE
        WHERE re_c_id = #{c_id}
        <if test="startDate != null and endDate != null">
		      AND re_reqdate BETWEEN #{startDate} AND #{endDate}+1
		</if>
    </select>

    <select id="countCurrentRefExchByCId" parameterType="String" resultType="Integer">
        SELECT count(*)
        FROM RE, O
        WHERE (re_process_status_id IN (1, 2)) AND re_o_id = o_id AND o_c_id = #{c_id}
    </select>

    <delete id="deleteRefExchList">
        DELETE FROM RE
        WHERE re_id = #{re_id}
    </delete>

</mapper>