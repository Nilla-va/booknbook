<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cjcs.bnb.dao.RentalDao">

<!-- 킹효진 -->
    <!-- 대여 예약 정보 조회 -->
    <select id="findRentalByCriteria" resultType="RentalReservationDto">
        SELECT * FROM rental_res
        WHERE rr_c_id = #{rr_c_id}
          AND rr_s_id = #{rr_s_id}
          AND rr_b_isbn = #{rr_b_isbn}
    </select>

    <!-- 대여 예약 정보 삽입 -->
    <insert id="insertRental">
        INSERT INTO rental_res (
            rr_id, rr_c_id, rr_s_id, rr_b_isbn, rr_reqdate, rr_res_status_id
        ) VALUES (RR_SEQ.NEXTVAL, #{rr_c_id}, #{rr_s_id}, #{rr_b_isbn}, SYSDATE, 1)
    </insert>


<!--수희-->
    <select id="getRentalListByOId" parameterType="Integer" resultType="Map">
        <!-- Map객체에 넣을 때는 아래처럼 as "키이름" 지정해줘야 함 -->
        SELECT s_storename as "s_storename",
               b_title as "b_title",
               b_rent as "b_rent",
               r_rentalperiod as "r_rentalperiod",
               order_status_id as "order_status_id",
               order_status as "order_status",
               delivery_status_id as "delivery_status_id",
               delivery_status as "delivery_status",
               r_deliverydate as "r_deliverydate",
               r_rental_status_id as "r_rental_status_id",
               r_latefee_total as "r_latefee_total",
               r_latefee_paid as "r_latefee_paid"
        FROM O, R, B, S, STATUS_O, STATUS_D
        WHERE o_id = r_o_id AND r_s_id = s_id AND
              r_s_id = b_s_id AND r_b_isbn = b_isbn AND
              r_order_status_id = order_status_id AND
              r_delivery_status_id = delivery_status_id AND
              o_id = #{o_id}
        ORDER BY s_storename DESC
    </select>

    <select id="getRentalListByCId" parameterType="String" resultType="Map">
        <!-- Map객체에 넣을 때는 아래처럼 as "키이름" 지정해줘야 함 -->
        SELECT o_id as "o_id",
               o_date as "o_date",
               b_title as "b_title",
               s_storename as "s_storename",
               rental_status as "rental_status",
               r_duedate as "r_duedate",
               r_latefee_total as "r_latefee_total"
        FROM O, R, B, S, STATUS_R
        WHERE o_id = r_o_id AND r_s_id = s_id AND r_s_id = b_s_id AND
              r_b_isbn = b_isbn AND r_rental_status_id = rental_status_id AND
              r_c_id = #{c_id}
        ORDER BY o_date DESC, s_storename, b_title
    </select>

    <!-- 구매자별 조회기간 내의 대여항목-->
    <select id="getRentalListByDateRange" resultType="Map">
		SELECT * FROM
		<choose>
		    <when test="startDate != null and endDate != null">                
		    	(SELECT rownum rn, RL.*      
		    	 FROM (SELECT o_id as "o_id",
                              o_date as "o_date",
                              b_title as "b_title",
                              s_storename as "s_storename",
                              rental_status as "rental_status",
                              r_duedate as "r_duedate",
                              r_latefee_total as "r_latefee_total",
                              r_latefee_paid as "r_latefee_paid",
                              r_latefee_paydate as "r_latefee_paydate",
                              r_id as "r_id"
                       FROM O, R, B, S, STATUS_R
                       WHERE o_id = r_o_id AND r_s_id = s_id AND r_s_id = b_s_id AND
                             r_b_isbn = b_isbn AND r_rental_status_id = rental_status_id AND
                             r_c_id = #{c_id} AND o_date BETWEEN #{startDate} AND #{endDate}+1
                       ORDER BY o_date DESC, s_storename, b_title) RL
		    	)
		    </when>
		    <otherwise>
		    	(SELECT rownum rn, RL.*
				 FROM (SELECT o_id as "o_id",
                              o_date as "o_date",
                              b_title as "b_title",
                              s_storename as "s_storename",
                              rental_status as "rental_status",
                              r_duedate as "r_duedate",
                              r_latefee_total as "r_latefee_total",
                              r_latefee_paid as "r_latefee_paid",
                              r_latefee_paydate as "r_latefee_paydate",
                              r_id as "r_id"
                       FROM O, R, B, S, STATUS_R
                       WHERE o_id = r_o_id AND r_s_id = s_id AND r_s_id = b_s_id AND
                             r_b_isbn = b_isbn AND r_rental_status_id = rental_status_id AND
                             r_c_id = #{c_id}
                       ORDER BY o_date DESC, s_storename, b_title) RL
				)
		    </otherwise>
		</choose>
		<![CDATA[
		WHERE rn>=#{pageNum}*#{listCnt}-9 and rn<=#{pageNum}*#{listCnt}
		]]>
    </select>

    <select id="getRentalByRId" resultType="RentalDto">
        SELECT r_id, s_storename, b_title, r_duedate, r_latefee_total
        FROM ORDER_LIST_R WHERE r_id = #{r_id}
    </select>

    <select id="getRentalListByStatusR" resultType="RentalDto">
        SELECT * FROM R WHERE r_rental_status_id = #{code}
    </select>

    <select id="getRentalListByLatefeePaid" resultType="RentalDto">
        SELECT * FROM R WHERE r_latefee_paid = #{code}
    </select>

    <select id="getCurrentRentalListByCId" parameterType="String" resultType="Map">
        SELECT rownum,
               b_title as "b_title",
               s_storename as "s_storename",
               r_duedate as "r_duedate",
               rental_status as "rental_status",
               r_latefee_total as "r_latefee_total"
        FROM (SELECT b_title, s_storename, r_duedate, rental_status, r_latefee_total
            FROM R, S, B, STATUS_R
            WHERE r_s_id = s_id AND r_s_id = b_s_id AND r_b_isbn = b_isbn AND
                    r_rental_status_id = rental_status_id AND
                    (r_rental_status_id IN (2, 3) OR (r_rental_status_id IN (4) AND r_latefee_paid IN ('N'))) AND
                    r_c_id = #{c_id}
            ORDER BY r_duedate)
        <![CDATA[
        WHERE rownum<4
        ]]>
    </select>

    <select id="getLatest5RentalListByCId" parameterType="String" resultType="RentalDto">
        SELECT rownum, o_id, o_date, b_title, delivery_status
        FROM (SELECT o_id, o_date, b_title, delivery_status
              FROM order_list_r
              WHERE o_c_id = #{c_id} ORDER BY o_date DESC)
        <![CDATA[
        WHERE rownum<6
        ]]>
    </select>

    <select id="getCustomerBlackList" resultType="Map">
        SELECT r_c_id as "id", c_name as "name", overdues as "overdues", latefee as "latefee"
        FROM (SELECT r_c_id, c_name, COUNT(*) as overdues, SUM(r_latefee_total) as latefee
              FROM R, C 
              WHERE r_c_id = c_id AND
                    <![CDATA[
                    r_duedate >= (SYSDATE - INTERVAL '3' MONTH) AND
                    ]]>
                    r_latefee_total IS NOT NULL
              GROUP BY r_c_id, c_name)
        <![CDATA[
        WHERE overdues >= #{frequency}
        ]]>
        ORDER BY c_name
    </select>

    <update id="updateRentalStatusByRId">
        UPDATE R
        SET r_rental_status_id = #{code},
            r_latefee_total = #{latefee},
            r_latefee_paid = #{paid_or_not}
        WHERE r_id = #{r_id}
    </update>

    <!-- 판매자페이지 주문취소관리용 -->
    <update id="updateOrderStatusByRId">
        UPDATE R
        SET r_order_status_id = #{status_id}
            <if test="reason != null">
                , r_ordercancel_rejection_reason = #{reason}
            </if>
        WHERE r_id = #{item_id}
    </update>

    <update id="updateLatefeeByRId">
        UPDATE R SET r_latefee_total = r_latefee_total + #{latefee}
        WHERE r_id = #{r_id}
    </update>

    <update id="updateLatefeePayDateByRId">
        UPDATE R SET r_latefee_paid = #{code}, r_latefee_paydate = SYSDATE
        WHERE r_id = #{r_id}
    </update>

    <select id="getStoreLatefeeByRId">
        SELECT s_latefee FROM S, R WHERE s_id = r_s_id AND r_id = #{r_id}
    </select>

    <select id="countCurrentRentalByCId" parameterType="String" resultType="Integer">
        SELECT COUNT(*)
        FROM R
        WHERE (r_rental_status_id IN (2, 3) OR (r_rental_status_id IN (4) AND r_latefee_paid IN ('N'))) AND r_c_id = #{c_id}
    </select>

    <select id="countLateReturnsByCId">
        SELECT COUNT(*) FROM R
        WHERE r_c_id = #{c_id} AND r_latefee_total is not null
    </select>

    <!-- 구매자별 조회기간 내의 총 대여항목수 세기-->
    <select id="countRentalsByDateRange" resultType="Integer">
        SELECT COUNT(*) FROM R, O
        WHERE r_c_id = #{c_id} AND r_o_id = o_id
        <if test="startDate != null and endDate != null">
		      AND o_date BETWEEN #{startDate} AND #{endDate}+1
		</if>
    </select>

    <select id="countAllRentalItems" resultType="Map">
        SELECT COUNT(*) as "num_of_rentals" FROM R
    </select>

    <insert id="addRentalList">
        INSERT INTO R(r_o_id, r_s_id, r_b_isbn, r_c_id, r_order_status_id, r_ordercancel_rejection_reason, r_delivery_status_id, r_deliverydate, r_rentalperiod, r_duedate, r_rental_status_id, r_returndate, r_latefee_total, r_latefee_paid, r_latefee_paydate, r_id)
        VALUES(#{o_id}, #{s_id}, #{b_isbn}, #{c_id}, 1, NULL, 1, NULL, #{r_rentalperiod}, NULL, 1, NULL, NULL, NULL, NULL, R_SEQ.NEXTVAL)
    </insert>

    <update id="cancelRentalByOId" parameterType="Integer">
        UPDATE R
        SET r_order_status_id = 2
        WHERE r_o_id = #{o_id}
    </update>

    <select id="getReservationByRRId" parameterType="Integer" resultType="RentalReservationDto">
        SELECT * FROM RENTAL_RES_INFO WHERE rr_id = #{rr_id}
    </select>

    <select id="getReservationListByCId" parameterType="String" resultType="RentalReservationDto">
        SELECT RR.*, b_title, s_storename, res_status
        FROM RR, S, B, STATUS_RR
        WHERE rr_s_id = s_id AND rr_s_id = b_s_id AND
              rr_b_isbn = b_isbn AND rr_res_status_id = res_status_id AND
              rr_c_id = #{c_id}
        ORDER BY rr_id DESC
    </select>

    <select id="getReservationListByStatusRR" parameterType="Integer" resultType="RentalReservationDto">
        SELECT * FROM RENTAL_RES_INFO 
        WHERE rr_res_status_id = #{code}
    </select>

    <select id="getFirstReservationByStatusRR" resultType="RentalReservationDto">
        SELECT rownum rn, RRI.*
        FROM (SELECT * FROM RENTAL_RES_INFO 
              WHERE rr_res_status_id = #{code} AND
		            rr_s_id = #{s_id} AND
		            rr_b_isbn = #{b_isbn}
              ORDER BY rr_reqdate) RRI
        <![CDATA[
        WHERE rn <= 1
        ]]>
    </select>

    <!-- 구매자별 조회기간 내의 대여예약-->
    <select id="getReservationListByDateRange" resultType="RentalReservationDto">
		SELECT * FROM
		<choose>
		    <when test="startDate != null and endDate != null">                
		    	(SELECT rownum rn, RRL.*      
		    	 FROM (SELECT RR.*, b_title, s_storename, res_status
                       FROM RR, S, B, STATUS_RR
                       WHERE rr_s_id = s_id AND rr_s_id = b_s_id AND
                             rr_b_isbn = b_isbn AND rr_res_status_id = res_status_id AND
                             rr_c_id = #{c_id} AND rr_reqdate BETWEEN #{startDate} AND #{endDate}+1
                       ORDER BY rr_reqdate DESC) RRL
		    	)
		    </when>
		    <otherwise>
		    	(SELECT rownum rn, RRL.*
				 FROM (SELECT RR.*, b_title, s_storename, res_status
                       FROM RR, S, B, STATUS_RR
                       WHERE rr_s_id = s_id AND rr_s_id = b_s_id AND
                             rr_b_isbn = b_isbn AND rr_res_status_id = res_status_id AND
                             rr_c_id = #{c_id}
                       ORDER BY rr_reqdate DESC) RRL
				)
		    </otherwise>
		</choose>
		<![CDATA[
		WHERE rn>=#{pageNum}*#{listCnt}-9 and rn<=#{pageNum}*#{listCnt}
		]]>
    </select>

    <!-- 구매자별 조회기간 내의 총 대여예약건수 세기-->
    <select id="countReservationsByDateRange" resultType="Integer">
        SELECT COUNT(*) FROM RR
        WHERE rr_c_id = #{c_id}
        <if test="startDate != null and endDate != null">
		      AND rr_reqdate BETWEEN #{startDate} AND #{endDate}+1
		</if>
    </select>

    <update id="updateReservationByRRId">
        UPDATE RR
        SET rr_res_status_id = #{code}
        <if test="cancel_reason != null">
		      , rr_cancel_reason = #{cancel_reason} 
		</if>
        WHERE rr_id = #{rr_id}
    </update>

    <update id="setPaymentDuedate">
        UPDATE RR
        SET rr_res_status_id = 5, rr_duedate = SYSDATE + #{days} - 1 
        WHERE rr_id = #{rr_id}
    </update>

<!-- 예림 -->
    <!-- 예약 신청 리스트 불러오기 -->
    <select id="RentResList" resultType="RentalDto">
        select rr_id, rr_c_id, b_title, rr_reqdate, res_status, rr_rejection_reason
        from Rental_Res
        inner join Book on Rental_Res.rr_b_isbn = Book.b_isbn
        inner join Status_RR on Rental_Res.rr_res_status_id = Status_RR.res_status_id
        where rr_s_id = #{s_id} and (not res_status = '대여가능' or not res_status = '대여완료')
    </select>

    <!-- 예약 수락 -->
    <update id="ReserveAccept">
        UPDATE Rental_Res
        SET rr_res_status_id = (
            SELECT res_status_id
            FROM Status_RR
            WHERE res_status = '예약중'
        )
        WHERE rr_id = #{rr_id}
    </update>

    <!-- 예약 거절 -->
    <update id="ReserveRefuse">
        UPDATE Rental_Res
        SET rr_res_status_id = (
            SELECT res_status_id
            FROM Status_RR
            WHERE res_status = '예약불가'
            ),
            RR_REJECTION_REASON = #{rr_rejection_reason}
        WHERE rr_id = #{rr_id}
    </update>

    <resultMap id="rentalResultMap" type="RentalDto">
        <result property="DELIVERYDATE" column="DELIVERYDATE" javaType="Date" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 대여 현황 -->
    <select id="RentCurrentList" resultType="RentalDto">
        SELECT
            o_id, o_date, o_c_id, b_title, r_rentalperiod,
            NVL(DELIVERYDATE, '') AS DELIVERYDATE, r_duedate, o_delivery_sort, delivery_status, rental_status,
            CASE
                WHEN r_returndate IS NOT NULL THEN r_returndate - DELIVERYDATE - r_rentalperiod
                ELSE NULL
            END AS overdue_days
        FROM
            order_list
        WHERE
            order_sort = '대여'
            <![CDATA[AND (rental_status <> '반납완료' OR rental_status IS NULL)]]>
            AND S_ID = #{s_id}
    </select>

 


    <!-- 배송 상태명 -->
    <select id="DeliveryStatusList" resultType="RentalDto">
        select delivery_status from Status_D
    </select>

    <!-- 배송상태 업데이트 -->
    <update id="UpdateDeliStatus">
        UPDATE Rental
        SET R_DELIVERY_STATUS_ID = (
            SELECT DELIVERY_STATUS_ID
            FROM Status_D
            WHERE DELIVERY_STATUS = #{delivery_status}
        )
        WHERE r_o_id = #{o_id}
        AND R_B_ISBN = (
            SELECT b_isbn from book where b_title = #{b_title} and b_s_id = #{s_id}
        )
    </update>

    <!-- 배송완료일 지정 -->
    <update id="UpdateDeliveryDate">
        UPDATE Rental
        SET R_DELIVERYDATE = TO_DATE(TO_CHAR(sysdate, 'YYYY-MM-DD'), 'YYYY-MM-DD')
        WHERE r_o_id = #{o_id}
        AND R_B_ISBN = (
            SELECT b_isbn from book where b_title = #{b_title} and b_s_id = #{s_id}
        )
        AND (
            R_DELIVERY_STATUS_ID = (
                SELECT DELIVERY_STATUS_ID
                FROM Status_D
                WHERE DELIVERY_STATUS = '배송완료'
                AND ROWNUM = 1
            )
            OR
            R_DELIVERY_STATUS_ID = (
                SELECT DELIVERY_STATUS_ID
                FROM Status_D
                WHERE DELIVERY_STATUS = '수령완료'
                AND ROWNUM = 1
            )
        )
    </update>

    <!-- 반납 기한일 지정 -->
    <update id="UpdateDuedate">
        UPDATE Rental
        SET r_duedate = r_deliverydate + r_rentalperiod
        WHERE r_o_id = #{o_id}
        AND R_B_ISBN = (
            SELECT b_isbn from book where b_title = #{b_title} and b_s_id = #{s_id}
        )
        AND (
            R_DELIVERY_STATUS_ID = (
                SELECT DELIVERY_STATUS_ID
                FROM Status_D
                WHERE DELIVERY_STATUS = '배송완료'
                AND ROWNUM = 1
            )
            OR
            R_DELIVERY_STATUS_ID = (
                SELECT DELIVERY_STATUS_ID
                FROM Status_D
                WHERE DELIVERY_STATUS = '수령완료'
                AND ROWNUM = 1
            )
        )
    </update>

    <!-- 대여 상태 업데이트 [대여시작전] -->
    <update id="UpdateRentStatus_Wait">
        UPDATE Rental   
        SET R_RENTAL_STATUS_ID = (
            SELECT RENTAL_STATUS_ID
            FROM Status_R
            WHERE RENTAL_STATUS = '대여시작전'
            AND ROWNUM = 1
        )
        WHERE r_o_id = #{o_id}
        AND R_DELIVERY_STATUS_ID NOT IN (
            SELECT DELIVERY_STATUS_ID
            FROM Status_D
            WHERE DELIVERY_STATUS IN ('배송완료', '수령완료')
        )
        AND R_B_ISBN = (
            SELECT b_isbn from book where b_title = #{b_title} and b_s_id = #{s_id}
        )
    </update>

    <!-- 대여 상태 업데이트 [대여중] -->
    <update id="UpdateRentStatus_Curr">
        UPDATE Rental
        SET R_RENTAL_STATUS_ID = (
            SELECT RENTAL_STATUS_ID
            FROM Status_R
            WHERE RENTAL_STATUS = '대여중'
            AND ROWNUM = 1
        )
        WHERE r_o_id = #{o_id}
        AND (
            R_DELIVERY_STATUS_ID = (
                SELECT DELIVERY_STATUS_ID
                FROM Status_D
                WHERE DELIVERY_STATUS = '배송완료'
                AND ROWNUM = 1
            )
            OR
            R_DELIVERY_STATUS_ID = (
                SELECT DELIVERY_STATUS_ID
                FROM Status_D
                WHERE DELIVERY_STATUS = '수령완료'
                AND ROWNUM = 1
            )
        )
        AND R_B_ISBN = (
            SELECT b_isbn from book where b_title = #{b_title} and b_s_id = #{s_id}
        )
    </update>

    <!-- 대여 상태 업데이트 [연체] -->
    <update id="UpdateRentStatus_Late">
        UPDATE Rental r
        SET r.R_RENTAL_STATUS_ID = (
            SELECT MAX(RENTAL_STATUS_ID)
            FROM Status_R
            WHERE RENTAL_STATUS = '연체'
        )
        WHERE r_o_id = #{o_id}
        AND (
                (
                SELECT MAX(DELIVERYDATE + r_rentalperiod) FROM order_list WHERE o_id = #{o_id} AND b_title = #{b_title}
                ) <![CDATA[<]]> sysdate
        )
    </update>    

    <!-- 대여 상태 업데이트 [반납 완료] -->
    <update id="UpdateRentStatus_Return">
        UPDATE Rental
        SET R_RENTAL_STATUS_ID = (
            SELECT RENTAL_STATUS_ID
            FROM Status_R
            WHERE RENTAL_STATUS = '반납완료'
        )
        WHERE r_o_id = #{o_id}
        AND R_B_ISBN = (
            SELECT b_isbn from book where b_title = #{b_title} and b_s_id = #{s_id}
        )
    </update>

    <!-- 예약 1순위 예약 상태 변경 -->
    <update id="RentResStatus_First">
        UPDATE Rental_Res r
        SET r.RR_RES_STATUS_ID = (
            SELECT MAX(s.RES_STATUS_ID)
            FROM Status_RR s
            WHERE s.RES_STATUS = '대여가능'
        )
        WHERE r.RR_S_ID = #{s_id}
        AND r.RR_B_ISBN IN (
            SELECT b_isbn FROM book WHERE b_title = #{b_title}
        )
        AND r.RR_REQDATE IN (
            SELECT MIN(RR_REQDATE)
            FROM Rental_Res rr
            JOIN book b ON rr.RR_B_ISBN = b.b_isbn
            WHERE rr.RR_S_ID = #{s_id} AND b.b_title = #{b_title}
        )
    </update>

    <!-- 예약 1순위 대여가능 알림 전송 -->
    <insert id="RentRes_First_Alert">
        INSERT INTO NotifBoard(NB_M_ID, NB_MSG, NB_DATE, B_ISBN, B_S_ID, B_TITLE, S_STORENAME)
        SELECT rr.RR_C_ID,
            '대여가능',
            sysdate,
            rr.RR_B_ISBN,
            #{s_id},
            b.b_title,
            s.S_STORENAME
        FROM (
            SELECT *
            FROM Rental_Res rr
            JOIN book b ON rr.RR_B_ISBN = b.b_isbn
            WHERE rr.RR_S_ID = #{s_id} AND b.b_title = #{b_title}
            ORDER BY RR_REQDATE
        ) rr
        JOIN seller s ON s.S_ID = #{s_id}
        WHERE ROWNUM = 1
    </insert>

    <!-- 예약 1순위 결제기한 추가 -->
    <update id="RentRes_First_Pay">
        UPDATE Rental_Res rr
        SET rr.RR_DUEDATE = SYSDATE + 1
        WHERE rr.RR_S_ID = (
            SELECT RR_S_ID
            FROM (
                SELECT rr2.RR_S_ID
                FROM Rental_Res rr2
                JOIN book b ON rr2.RR_B_ISBN = b.b_isbn
                WHERE rr2.RR_S_ID = #{s_id} AND b.b_title = #{b_title}
                ORDER BY rr2.RR_REQDATE
            )
            WHERE ROWNUM = 1
        )
    </update>

    <!-- 대여 재고 조회 -->
    <select id="getRentalStock" resultType="RentalDto">
        select b_s_id, b_title, b_rentalstock
        from book
        where b_title = #{b_title}
        and b_s_id = #{s_id}
    </select>

    <!-- 대여 재고 증가 -->
    <update id="RentalStockAdd">
        UPDATE BOOK
        SET B_RENTALSTOCK = B_RENTALSTOCK + 1
        WHERE B_TITLE = #{b_title}
        and b_s_id = #{s_id}
    </update>

    <!-- 예약자 수 조회 -->
    <select id="CountRentalRes" resultType="RentalDto">
        select count(*)
        from Rental_Res
        where rr_s_id = #{s_id}
        AND RR_B_ISBN IN (
            SELECT b_isbn FROM book WHERE b_title = #{b_title}
        )
    </select>

    <!-- 반납 현황 -->
    <select id="RentReturnList" resultType="RentalDto">
        select o_id, o_c_id, b_title, o_date, r_returndate, r_duedate,
               r_latefee_total, r_latefee_paid, r_latefee_paydate
        FROM
            ORDER_LIST
        WHERE
            order_sort = '대여' AND
            s_id = #{s_id} AND
            r_returndate IS NOT NULL
    </select>

   
</mapper>